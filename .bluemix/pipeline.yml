---
stages:
  - name: Build
    inputs:
      - type: git
        branch: master
    triggers:
      - type: commit
        enabled: false
    jobs:
      - name: Changelog
        type: builder
        build_type: shell
        script: |-
          #!/bin/bash
          # This script just dumps the changes included in this build into a file named changelog.txt
          # This change log can be used later to be included in notifications
          git log ${GIT_COMMIT}..HEAD --graph --oneline > changelog.txt
          cat changelog.txt
      - name: NPM
        type: builder
        build_type: npm
        script: |-
          #!/bin/bash
          export PATH=/opt/IBM/node-v0.12/bin:$PATH
          echo Downloading and extracting archive...
          curl -s -L -o node_modules.tar.gz https://github.com/interconnect5355/tutorial1_node/blob/master/node_modules.tar.gz\?raw\=true
          tar -xzf node_modules.tar.gz
          npm install
          rm -rf node_modules
  - name: 'Run Unit Tests'
    inputs:
      - type: job
        stage: Build
        job: NPM
    triggers:
      - type: stage
    properties:
      - name: APP_NAME
        value: '${CF_APP}'
        type: text
      - name: SLACK_WEBHOOK_PATH
        value: ''
        type: text
      - name: SLACK_MESSAGE
        value: 'Build done & all tests passed.'
        type: text
    jobs:
      - name: Linting
        type: tester
        script: |-
          #!/bin/bash
          tar -xzf node_modules.tar.gz
          node ./node_modules/gulp/bin/gulp lint
        enable_tests: true
        test_file_pattern: 'test/*.xml'
      - name: Unit Tests
        type: tester
        script: |-
          #!/bin/bash
          tar -xzf node_modules.tar.gz
          # Karma Unit Test, output file: test/*.xml
          node ./node_modules/gulp/bin/gulp dev-karma
          # Mocha Unit Test, output file: test/*.xml
          node ./node_modules/gulp/bin/gulp dev-mocha
          # Mocha Api Unit Test, output file: xunit.xml
          node ./node_modules/mocha/bin/mocha --recursive --reporter xunit-file test/api/
        enable_tests: true
        test_file_pattern: '*.xml, test/*.xml'
      - name: Slack Notification
        type: tester
        script: |-
          #!/bin/bash
          if [[ ${SLACK_WEBHOOK_PATH} == '' ]];
          then
            echo 'Slack WebHook Path is empty!'
          else
            curl -X POST --data-urlencode 'payload={"text": "'"${APP_NAME}"': '"${SLACK_MESSAGE}"'"}' ${SLACK_WEBHOOK_PATH}
          fi
  - name: Deploy to Test
    inputs:
      - type: job
        stage: 'Build'
        job: Changelog
    triggers:
      - type: stage
    properties:
      - name: APP_NAME
        value: '${CF_APP}'
        type: text
      - name: SLACK_WEBHOOK_PATH
        value: ''
        type: text
      - name: SLACK_MESSAGE
        value: 'Test deployment done.'
        type: text
    jobs:
      - name: Deploy
        type: deployer
        target:
          url: '${CF_TARGET_URL}'
          organization: '${CF_ORGANIZATION}'
          space: '${CF_SPACE}'
          application: '${CF_APP}'
        script: |-
          #!/bin/bash
          cf push "${CF_APP}-test-blue" -n "${CF_APP}-test"
          cf delete "${CF_APP}-test-green" --f
          cf rename "${CF_APP}-test-blue" "${CF_APP}-test-green"
      - name: Slack Notification
        type: tester
        script: |-
          #!/bin/bash
          if [[ ${SLACK_WEBHOOK_PATH} == '' ]];
          then
            echo 'Slack WebHook Path is empty!'
          else
            curl -X POST --data-urlencode 'payload={"text": "'"${APP_NAME}"': '"${SLACK_MESSAGE}"'"}' ${SLACK_WEBHOOK_PATH}
          fi
  - name: 'Run Tests - Performance & Scale'
    inputs:
      - type: job
        stage: 'Build'
        job: NPM
    triggers:
      - type: stage
    properties:
      - name: APP_NAME
        value: '${CF_APP}'
        type: text
      - name: NEW_RELIC_LICENSE_KEY
        value: ''
        type: text
      - name: SPEED_CURVE_API_KEY
        value: ''
        type: text
      - name: SAUCE_USERNAME
        value: ''
        type: text
      - name: SAUCE_ACCESS_KEY
        value: ''
        type: text
      - name: LOAD_IMPACT_API_TOKEN
        value: ''
        type: text
      - name: LOAD_IMPACT_TEST_URL
        value: ''
        type: text
    jobs:
      - name: SpeedCurve
        type: tester
        script: |-
          #!/bin/bash
          if [[ ${SPEED_CURVE_API_KEY} == '' ]];
          then
            echo 'Speed Curve API Key is empty!'
          else
            curl "https://api.speedcurve.com/v1/deploy" -u ${SPEED_CURVE_API_KEY}:x --request POST --data note=${APP_NAME}
          fi
      - name: New Relic
        type: builder
        build_type: shell
        script: |-
          #!/bin/bash
          if [[ ${NEW_RELIC_LICENSE_KEY} == '' ]];
          then
            echo "New Relic is disabled. Please specify your NewRelic API key.";
          else
            cp node_modules/newrelic/newrelic.js ./
            mkdir .newrelic
            echo ${NEW_RELIC_LICENSE_KEY} > .newrelic/key;
          fi
      - name: Sauce Labs Tests
        type: tester
        script: |-
          #!/bin/bash
          if [[ ${SAUCE_USERNAME} == '' || ${SAUCE_ACCESS_KEY} == '' || ${APP_NAME} == '' ]];
          then
            echo 'App Test URL, Sauce Labs Username and/or Access Key is empty!'
          else
            npm test
          fi
        enable_tests: true
        test_file_pattern: test/*.xml
      - name: Load Impact Test
        type: tester
        script: |-
          #!/bin/bash
          if [[ ${LOAD_IMPACT_TEST_URL} == '' || ${LOAD_IMPACT_API_TOKEN} == '' ]];
          then
            echo 'Load Impact Test URL or API Token is empty!'
          else
            curl -X POST "${LOAD_IMPACT_TEST_URL}" -u "${LOAD_IMPACT_API_TOKEN}:"
          fi
  - name: Deploy to Prod
    inputs:
      - type: job
        stage: 'Run Tests - Performance & Scale'
        job: New Relic
    triggers:
      - type: stage
    properties:
      - name: APP_NAME
        value: '${CF_APP}'
        type: text
      - name: SLACK_WEBHOOK_PATH
        value: ''
        type: text
      - name: SLACK_MESSAGE
        value: 'Prod deployment done.'
        type: text
    jobs:
      - name: Deploy
        type: deployer
        target:
          url: '${CF_TARGET_URL}'
          organization: '${CF_ORGANIZATION}'
          space: '${CF_SPACE}'
          application: '${CF_APP}'
        script: |-
          #!/bin/bash
          cf push "${CF_APP}-blue" -n "${CF_APP}" --no-start
          if [ -f .newrelic/key ];
          then
            export NEW_RELIC_LICENSE_KEY=`cat .newrelic/key`
            cf set-env "${CF_APP}-blue" NEW_RELIC_LICENSE_KEY "${NEW_RELIC_LICENSE_KEY}"
            cf set-env "${CF_APP}-blue" NEW_RELIC_APP_NAME "${CF_APP}"
          fi
          export CF_APP_NAME="$CF_APP"
          cf start "${CF_APP}-blue"
          cf delete "${CF_APP}-green" --f
          cf rename "${CF_APP}-blue" "${CF_APP}-green"
          #
          # Instant Purging removes content from Fastly immediately so it can be refreshed from your origin servers.
          # The main entry point http://api.fastly.com/ for the API is not needed for an individual URL Instant Purge.
          curl -X PURGE http://${CF_APP}.mybluemix.net
      - name: Slack Notification
        type: tester
        script: |-
          #!/bin/bash
          if [[ ${SLACK_WEBHOOK_PATH} == '' ]];
          then
            echo 'Slack WebHook Path is empty!'
          else
            curl -X POST --data-urlencode 'payload={"text": "'"${APP_NAME}"': '"${SLACK_MESSAGE}"'"}' ${SLACK_WEBHOOK_PATH}
          fi
